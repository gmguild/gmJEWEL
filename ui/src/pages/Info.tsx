import React from "react";
import { classNames } from "../utils/classNames";
import TokenSupply from "../assets/TokenSupply.png";

// TODO: Update this page to get fees from smart contract rather than being hard-coded
export default function Info() {
  return (
    <div className="max-w-5xl mx-auto">
      <div>
        <article className="font-lora prose mx-auto pb-32">
          <section>
            <p>
              The Greedy Merchants Guild is a new community-run initiative
              designed for the greedy merchants of Defi Kingdoms. Our first
              feature is a secondary liquid marketplace for locked Jewel. We
              take inspiration from other liquid staking projects and utilise
              the power of DeFi composability in order to provide a number of
              features and additional incentives for users. Trades are
              facilitated through the DefiKingdoms exchange pool, where a
              percentage of trading fees will be distributed to Jewel holders.
              We plan to add further functionality as directed by our roadmap.
            </p>
          </section>
          <section>
            <h3>Minting</h3>
            <p>
              In order to sell locked Jewel, users must create a &apos;Jewel
              stash&apos; which is a custom-built smart contract which holds the
              users locked Jewel. After locking their jewel within this smart
              contract, they are then able to mint &apos;gmJEWEL&apos;, an ERC20
              token which is completely fungible. This gmJEWEL can then be
              traded like any other ERC20 token, and could even be used with
              other DeFi protocols (imagine taking a loan out against your
              gmJEWEL!)
            </p>
          </section>
          <section>
            <h3>Redeeming</h3>
            <p>
              For users wishing to buy locked jewel, they are able to purchase
              the gmJEWEL which has been produced by other users. In order to
              convert gmJEWEL back into the underlying locked Jewel, users must
              identify a Jewel stash of a similar size to the amount that they
              wish to redeem. Users have two options for redeeming locked from a
              jewel stash:
            </p>
            <ol>
              <li>
                They may redeem a jewel stash with a cost less than their
                current balance of gmJEWEL (and burning that amount gmJEWEL)
              </li>
              <li>
                They may redeem a jewel stash with a cost greater than their
                current balance of gmJEWEL (and they must pay the difference in
                unlocked Jewel)
              </li>
            </ol>
            <p>
              There is a small fee associated with redeeming gmJEWEL (and can be
              thought of as the spread). The fee is dynamic, and decreases if
              you redeem larger stashes.
            </p>
            <div className="w-8/12 mx-auto">
              <table className={classNames("min-w-full table-auto")}>
                <thead>
                  <tr>
                    <th>Tier</th>
                    <th>Jewel Stash Size</th>
                    <th>Fee</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>1</td>
                    <td>0-1000</td>
                    <td>1.5%</td>
                  </tr>
                  <tr>
                    <td>2</td>
                    <td>1000-10,000</td>
                    <td>1.0%</td>
                  </tr>
                  <tr>
                    <td>3</td>
                    <td>10,000-100,000</td>
                    <td>0.5%</td>
                  </tr>
                  <tr>
                    <td>4</td>
                    <td>100,000+</td>
                    <td>0.25%</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </section>
          <section>
            <h3>Governance</h3>
            <p>
              As mentioned, the Greedy Merchants Guild is being run as a
              community project. Fee Parameters are able to be adjusted
              according to a governance vote. As such, there will be a
              governance token $GMG which can be used as a voting token. 100% of
              the fees generated by gmJEWEL redemptions will be distributed to
              GMG stakers
            </p>
            <h4>Obtaining GMG</h4>
            <p>
              GMG can only be obtained by providing liquidity to incentivised
              liquidity pools. At launch, these pools will include:
            </p>
            <ul>
              <li>JEWEL - gmJEWEL pool on DefiKingdoms</li>
              <li>JEWEL - GMG pool on DefiKingdoms</li>
            </ul>
            <p>
              Incentivised pools will always be a JEWEL pair on DefiKingdoms to
              ensure the alignments of incentives with the long-term success of
              DefiKingdoms
            </p>
            <h4>Tokenomics</h4>
            <p>
              GMG is being released as a fair launch, with token supply
              beginning at 0 and emissions beginning at a rate of 10
              tokens/block to incentivised liquidity providers.
            </p>
            <p>
              The emission rate has been designed to approximately match the
              unlocking rate of JEWEL.
            </p>
            <p>There is no private sale, no pre-mine and no seed rounds.</p>
            <img src={TokenSupply} />
            <p>
              10% of tokens will be reserved for the dev team (which follows a
              similar emissions pattern)
            </p>
          </section>
          <section>
            <h3>Transparency</h3>
            <p>
              All our contracts are open source: <a className="hover:text-blue-600" href="https://github.com/gmguild/gmJEWEL" target="_blank" rel="noreferrer">gmguild/gmJEWEL</a>
              <br />
              As some of them are in Vyper, and not in Solidity, we are currently not able to verify these contracts on the Harmony explorer.
            </p>
            <p>
              Some contracts are Ownable, or have a developer&apos;s address for the dev fund allocation.
              <br />
              The current owner of the contracts is a Harmony Multisig safe also used for the dev fund, at address: 0x913C806bf4318e213EFfff70f5B187333cd2f838
              <br />
              The plan is to create a separate multisig with prominent members of the DFK and GMG community, that will own the contracts, control fees, etc.
            </p>
          </section>
          <section>
            <h3>Roadmap</h3>
            <p>
              Our contracts unlock composability which we intend to take
              advantage of by providing the following features:
            </p>
            <ul>
              <li>Forming a guild on DefiKingdoms</li>
              <li>Mining pools</li>
              <li>gmJEWEL as collateral</li>
              <li>Supporting DefiKingdoms expansions</li>
              <li>Multichain support</li>
              <li>NFTs</li>
            </ul>
          </section>
        </article>
      </div>
    </div>
  );
}
